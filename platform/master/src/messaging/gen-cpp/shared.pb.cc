// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "shared.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace presto {

namespace {

const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array_reflection_ = NULL;
const ::google::protobuf::Descriptor* Arg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompositeArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompositeArg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_shared_2eproto() {
  protobuf_AddDesc_shared_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "shared.proto");
  GOOGLE_CHECK(file != NULL);
  Response_descriptor_ = file->message_type(0);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, msg_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Response_Status_descriptor_ = Response_descriptor_->enum_type(0);
  ServerInfo_descriptor_ = file->message_type(1);
  static const int ServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, presto_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, start_port_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, end_port_range_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  ServerConfig_descriptor_ = file->message_type(2);
  static const int ServerConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, servers_),
  };
  ServerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerConfig_descriptor_,
      ServerConfig::default_instance_,
      ServerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerConfig));
  Tuple_descriptor_ = file->message_type(3);
  static const int Tuple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, val_),
  };
  Tuple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tuple_descriptor_,
      Tuple::default_instance_,
      Tuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tuple));
  Array_descriptor_ = file->message_type(4);
  static const int Array_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, sparse_),
  };
  Array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array_descriptor_,
      Array::default_instance_,
      Array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array));
  Arg_descriptor_ = file->message_type(5);
  static const int Arg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, arrays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, offsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, is_list_),
  };
  Arg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Arg_descriptor_,
      Arg::default_instance_,
      Arg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Arg));
  RawArg_descriptor_ = file->message_type(6);
  static const int RawArg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawArg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawArg, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawArg, fetch_need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawArg, server_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawArg, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawArg, fetch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawArg, data_size_),
  };
  RawArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawArg_descriptor_,
      RawArg::default_instance_,
      RawArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawArg));
  NewArg_descriptor_ = file->message_type(7);
  static const int NewArg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewArg, arrayname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewArg, varname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewArg, list_arraynames_),
  };
  NewArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewArg_descriptor_,
      NewArg::default_instance_,
      NewArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewArg));
  CompositeArg_descriptor_ = file->message_type(8);
  static const int CompositeArg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeArg, arraynames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeArg, offsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeArg, dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeArg, varname_),
  };
  CompositeArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompositeArg_descriptor_,
      CompositeArg::default_instance_,
      CompositeArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompositeArg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_shared_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerConfig_descriptor_, &ServerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tuple_descriptor_, &Tuple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array_descriptor_, &Array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Arg_descriptor_, &Arg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawArg_descriptor_, &RawArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewArg_descriptor_, &NewArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompositeArg_descriptor_, &CompositeArg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_shared_2eproto() {
  delete Response::default_instance_;
  delete Response_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete ServerConfig::default_instance_;
  delete ServerConfig_reflection_;
  delete Tuple::default_instance_;
  delete Tuple_reflection_;
  delete Array::default_instance_;
  delete Array_reflection_;
  delete Arg::default_instance_;
  delete Arg_reflection_;
  delete RawArg::default_instance_;
  delete RawArg_reflection_;
  delete NewArg::default_instance_;
  delete NewArg_reflection_;
  delete CompositeArg::default_instance_;
  delete CompositeArg_reflection_;
}

void protobuf_AddDesc_shared_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014shared.proto\022\006presto\"h\n\010Response\022+\n\006st"
    "atus\030\001 \001(\0162\027.presto.Response.Status:\002OK\022"
    "\013\n\003msg\030\002 \001(\t\"\033\n\006Status\022\006\n\002OK\020\001\022\t\n\005ERROR\020"
    "\002*\005\010d\020\310\001\"o\n\nServerInfo\022\014\n\004name\030\001 \002(\t\022\023\n\013"
    "presto_port\030\002 \002(\005\022\037\n\020start_port_range\030\003 "
    "\001(\005:\00550000\022\035\n\016end_port_range\030\004 \001(\005:\0055010"
    "0\"3\n\014ServerConfig\022#\n\007servers\030\001 \003(\0132\022.pre"
    "sto.ServerInfo\"\024\n\005Tuple\022\013\n\003val\030\001 \003(\003\"Y\n\005"
    "Array\022\014\n\004name\030\001 \002(\t\022\032\n\003dim\030\002 \002(\0132\r.prest"
    "o.Tuple\022\017\n\004size\030\003 \001(\003:\0010\022\025\n\006sparse\030\004 \001(\010"
    ":\005false\"\177\n\003Arg\022\014\n\004name\030\001 \002(\t\022\035\n\006arrays\030\002"
    " \003(\0132\r.presto.Array\022\036\n\007offsets\030\003 \003(\0132\r.p"
    "resto.Tuple\022\032\n\003dim\030\004 \001(\0132\r.presto.Tuple\022"
    "\017\n\007is_list\030\005 \001(\010\"\217\001\n\006RawArg\022\014\n\004name\030\001 \002("
    "\t\022\r\n\005value\030\002 \001(\014\022\031\n\nfetch_need\030\003 \002(\010:\005fa"
    "lse\022\023\n\013server_addr\030\004 \001(\t\022\023\n\013server_port\030"
    "\005 \001(\005\022\020\n\010fetch_id\030\006 \001(\t\022\021\n\tdata_size\030\007 \001"
    "(\003\"E\n\006NewArg\022\021\n\tarrayname\030\001 \002(\t\022\017\n\007varna"
    "me\030\002 \002(\t\022\027\n\017list_arraynames\030\003 \003(\t\"o\n\014Com"
    "positeArg\022\022\n\narraynames\030\001 \003(\t\022\036\n\007offsets"
    "\030\002 \003(\0132\r.presto.Tuple\022\032\n\003dim\030\003 \002(\0132\r.pre"
    "sto.Tuple\022\017\n\007varname\030\004 \002(\t", 866);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "shared.proto", &protobuf_RegisterTypes);
  Response::default_instance_ = new Response();
  ServerInfo::default_instance_ = new ServerInfo();
  ServerConfig::default_instance_ = new ServerConfig();
  Tuple::default_instance_ = new Tuple();
  Array::default_instance_ = new Array();
  Arg::default_instance_ = new Arg();
  RawArg::default_instance_ = new RawArg();
  NewArg::default_instance_ = new NewArg();
  CompositeArg::default_instance_ = new CompositeArg();
  Response::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  ServerConfig::default_instance_->InitAsDefaultInstance();
  Tuple::default_instance_->InitAsDefaultInstance();
  Array::default_instance_->InitAsDefaultInstance();
  Arg::default_instance_->InitAsDefaultInstance();
  RawArg::default_instance_->InitAsDefaultInstance();
  NewArg::default_instance_->InitAsDefaultInstance();
  CompositeArg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_shared_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_shared_2eproto {
  StaticDescriptorInitializer_shared_2eproto() {
    protobuf_AddDesc_shared_2eproto();
  }
} static_descriptor_initializer_shared_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Response_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_Status_descriptor_;
}
bool Response_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Response_Status Response::OK;
const Response_Status Response::ERROR;
const Response_Status Response::Status_MIN;
const Response_Status Response::Status_MAX;
const int Response::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Response::kStatusFieldNumber;
const int Response::kMsgFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:presto.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:presto.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 1;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:presto.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3) {
    status_ = 1;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:presto.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .presto.Response.Status status = 1 [default = OK];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::presto::Response_Status_IsValid(value)) {
            set_status(static_cast< ::presto::Response_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:presto.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:presto.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:presto.Response)
  // optional .presto.Response.Status status = 1 [default = OK];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:presto.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:presto.Response)
  // optional .presto.Response.Status status = 1 [default = OK];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:presto.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .presto.Response.Status status = 1 [default = OK];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kNameFieldNumber;
const int ServerInfo::kPrestoPortFieldNumber;
const int ServerInfo::kStartPortRangeFieldNumber;
const int ServerInfo::kEndPortRangeFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:presto.ServerInfo)
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:presto.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  presto_port_ = 0;
  start_port_range_ = 50000;
  end_port_range_ = 50100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:presto.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    presto_port_ = 0;
    start_port_range_ = 50000;
    end_port_range_ = 50100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:presto.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_presto_port;
        break;
      }

      // required int32 presto_port = 2;
      case 2: {
        if (tag == 16) {
         parse_presto_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presto_port_)));
          set_has_presto_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_port_range;
        break;
      }

      // optional int32 start_port_range = 3 [default = 50000];
      case 3: {
        if (tag == 24) {
         parse_start_port_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_port_range_)));
          set_has_start_port_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_port_range;
        break;
      }

      // optional int32 end_port_range = 4 [default = 50100];
      case 4: {
        if (tag == 32) {
         parse_end_port_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_port_range_)));
          set_has_end_port_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:presto.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:presto.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:presto.ServerInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 presto_port = 2;
  if (has_presto_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->presto_port(), output);
  }

  // optional int32 start_port_range = 3 [default = 50000];
  if (has_start_port_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_port_range(), output);
  }

  // optional int32 end_port_range = 4 [default = 50100];
  if (has_end_port_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_port_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:presto.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:presto.ServerInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 presto_port = 2;
  if (has_presto_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->presto_port(), target);
  }

  // optional int32 start_port_range = 3 [default = 50000];
  if (has_start_port_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_port_range(), target);
  }

  // optional int32 end_port_range = 4 [default = 50100];
  if (has_end_port_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_port_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:presto.ServerInfo)
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 presto_port = 2;
    if (has_presto_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presto_port());
    }

    // optional int32 start_port_range = 3 [default = 50000];
    if (has_start_port_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_port_range());
    }

    // optional int32 end_port_range = 4 [default = 50100];
    if (has_end_port_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_port_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_presto_port()) {
      set_presto_port(from.presto_port());
    }
    if (from.has_start_port_range()) {
      set_start_port_range(from.start_port_range());
    }
    if (from.has_end_port_range()) {
      set_end_port_range(from.end_port_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(presto_port_, other->presto_port_);
    std::swap(start_port_range_, other->start_port_range_);
    std::swap(end_port_range_, other->end_port_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerConfig::kServersFieldNumber;
#endif  // !_MSC_VER

ServerConfig::ServerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:presto.ServerConfig)
}

void ServerConfig::InitAsDefaultInstance() {
}

ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:presto.ServerConfig)
}

void ServerConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:presto.ServerConfig)
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConfig_descriptor_;
}

const ServerConfig& ServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

ServerConfig* ServerConfig::default_instance_ = NULL;

ServerConfig* ServerConfig::New() const {
  return new ServerConfig;
}

void ServerConfig::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:presto.ServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .presto.ServerInfo servers = 1;
      case 1: {
        if (tag == 10) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:presto.ServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:presto.ServerConfig)
  return false;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:presto.ServerConfig)
  // repeated .presto.ServerInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:presto.ServerConfig)
}

::google::protobuf::uint8* ServerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:presto.ServerConfig)
  // repeated .presto.ServerInfo servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:presto.ServerConfig)
  return target;
}

int ServerConfig::ByteSize() const {
  int total_size = 0;

  // repeated .presto.ServerInfo servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->servers())) return false;
  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConfig_descriptor_;
  metadata.reflection = ServerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tuple::kValFieldNumber;
#endif  // !_MSC_VER

Tuple::Tuple()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:presto.Tuple)
}

void Tuple::InitAsDefaultInstance() {
}

Tuple::Tuple(const Tuple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:presto.Tuple)
}

void Tuple::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tuple::~Tuple() {
  // @@protoc_insertion_point(destructor:presto.Tuple)
  SharedDtor();
}

void Tuple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tuple_descriptor_;
}

const Tuple& Tuple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

Tuple* Tuple::default_instance_ = NULL;

Tuple* Tuple::New() const {
  return new Tuple;
}

void Tuple::Clear() {
  val_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:presto.Tuple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 val = 1;
      case 1: {
        if (tag == 8) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_val())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_val;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:presto.Tuple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:presto.Tuple)
  return false;
#undef DO_
}

void Tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:presto.Tuple)
  // repeated int64 val = 1;
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->val(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:presto.Tuple)
}

::google::protobuf::uint8* Tuple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:presto.Tuple)
  // repeated int64 val = 1;
  for (int i = 0; i < this->val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->val(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:presto.Tuple)
  return target;
}

int Tuple::ByteSize() const {
  int total_size = 0;

  // repeated int64 val = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->val_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->val(i));
    }
    total_size += 1 * this->val_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tuple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tuple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tuple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tuple::MergeFrom(const Tuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  val_.MergeFrom(from.val_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tuple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuple::CopyFrom(const Tuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuple::IsInitialized() const {

  return true;
}

void Tuple::Swap(Tuple* other) {
  if (other != this) {
    val_.Swap(&other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tuple_descriptor_;
  metadata.reflection = Tuple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array::kNameFieldNumber;
const int Array::kDimFieldNumber;
const int Array::kSizeFieldNumber;
const int Array::kSparseFieldNumber;
#endif  // !_MSC_VER

Array::Array()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:presto.Array)
}

void Array::InitAsDefaultInstance() {
  dim_ = const_cast< ::presto::Tuple*>(&::presto::Tuple::default_instance());
}

Array::Array(const Array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:presto.Array)
}

void Array::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dim_ = NULL;
  size_ = GOOGLE_LONGLONG(0);
  sparse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:presto.Array)
  SharedDtor();
}

void Array::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete dim_;
  }
}

void Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array_descriptor_;
}

const Array& Array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

Array* Array::default_instance_ = NULL;

Array* Array::New() const {
  return new Array;
}

void Array::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Array*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(size_, sparse_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_dim()) {
      if (dim_ != NULL) dim_->::presto::Tuple::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:presto.Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dim;
        break;
      }

      // required .presto.Tuple dim = 2;
      case 2: {
        if (tag == 18) {
         parse_dim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional int64 size = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sparse;
        break;
      }

      // optional bool sparse = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_sparse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sparse_)));
          set_has_sparse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:presto.Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:presto.Array)
  return false;
#undef DO_
}

void Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:presto.Array)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .presto.Tuple dim = 2;
  if (has_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dim(), output);
  }

  // optional int64 size = 3 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->size(), output);
  }

  // optional bool sparse = 4 [default = false];
  if (has_sparse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sparse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:presto.Array)
}

::google::protobuf::uint8* Array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:presto.Array)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .presto.Tuple dim = 2;
  if (has_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dim(), target);
  }

  // optional int64 size = 3 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->size(), target);
  }

  // optional bool sparse = 4 [default = false];
  if (has_sparse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sparse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:presto.Array)
  return target;
}

int Array::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .presto.Tuple dim = 2;
    if (has_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dim());
    }

    // optional int64 size = 3 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional bool sparse = 4 [default = false];
    if (has_sparse()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array::MergeFrom(const Array& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_dim()) {
      mutable_dim()->::presto::Tuple::MergeFrom(from.dim());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_sparse()) {
      set_sparse(from.sparse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array::CopyFrom(const Array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Array::Swap(Array* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(dim_, other->dim_);
    std::swap(size_, other->size_);
    std::swap(sparse_, other->sparse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array_descriptor_;
  metadata.reflection = Array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Arg::kNameFieldNumber;
const int Arg::kArraysFieldNumber;
const int Arg::kOffsetsFieldNumber;
const int Arg::kDimFieldNumber;
const int Arg::kIsListFieldNumber;
#endif  // !_MSC_VER

Arg::Arg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:presto.Arg)
}

void Arg::InitAsDefaultInstance() {
  dim_ = const_cast< ::presto::Tuple*>(&::presto::Tuple::default_instance());
}

Arg::Arg(const Arg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:presto.Arg)
}

void Arg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dim_ = NULL;
  is_list_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arg::~Arg() {
  // @@protoc_insertion_point(destructor:presto.Arg)
  SharedDtor();
}

void Arg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete dim_;
  }
}

void Arg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arg_descriptor_;
}

const Arg& Arg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

Arg* Arg::default_instance_ = NULL;

Arg* Arg::New() const {
  return new Arg;
}

void Arg::Clear() {
  if (_has_bits_[0 / 32] & 25) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_dim()) {
      if (dim_ != NULL) dim_->::presto::Tuple::Clear();
    }
    is_list_ = false;
  }
  arrays_.Clear();
  offsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Arg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:presto.Arg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arrays;
        break;
      }

      // repeated .presto.Array arrays = 2;
      case 2: {
        if (tag == 18) {
         parse_arrays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrays()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arrays;
        if (input->ExpectTag(26)) goto parse_offsets;
        break;
      }

      // repeated .presto.Tuple offsets = 3;
      case 3: {
        if (tag == 26) {
         parse_offsets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offsets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_offsets;
        if (input->ExpectTag(34)) goto parse_dim;
        break;
      }

      // optional .presto.Tuple dim = 4;
      case 4: {
        if (tag == 34) {
         parse_dim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_list;
        break;
      }

      // optional bool is_list = 5;
      case 5: {
        if (tag == 40) {
         parse_is_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_list_)));
          set_has_is_list();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:presto.Arg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:presto.Arg)
  return false;
#undef DO_
}

void Arg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:presto.Arg)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .presto.Array arrays = 2;
  for (int i = 0; i < this->arrays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrays(i), output);
  }

  // repeated .presto.Tuple offsets = 3;
  for (int i = 0; i < this->offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->offsets(i), output);
  }

  // optional .presto.Tuple dim = 4;
  if (has_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dim(), output);
  }

  // optional bool is_list = 5;
  if (has_is_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:presto.Arg)
}

::google::protobuf::uint8* Arg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:presto.Arg)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .presto.Array arrays = 2;
  for (int i = 0; i < this->arrays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrays(i), target);
  }

  // repeated .presto.Tuple offsets = 3;
  for (int i = 0; i < this->offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->offsets(i), target);
  }

  // optional .presto.Tuple dim = 4;
  if (has_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dim(), target);
  }

  // optional bool is_list = 5;
  if (has_is_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:presto.Arg)
  return target;
}

int Arg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .presto.Tuple dim = 4;
    if (has_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dim());
    }

    // optional bool is_list = 5;
    if (has_is_list()) {
      total_size += 1 + 1;
    }

  }
  // repeated .presto.Array arrays = 2;
  total_size += 1 * this->arrays_size();
  for (int i = 0; i < this->arrays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrays(i));
  }

  // repeated .presto.Tuple offsets = 3;
  total_size += 1 * this->offsets_size();
  for (int i = 0; i < this->offsets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offsets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Arg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Arg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arg::MergeFrom(const Arg& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrays_.MergeFrom(from.arrays_);
  offsets_.MergeFrom(from.offsets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_dim()) {
      mutable_dim()->::presto::Tuple::MergeFrom(from.dim());
    }
    if (from.has_is_list()) {
      set_is_list(from.is_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Arg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arg::CopyFrom(const Arg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->arrays())) return false;
  return true;
}

void Arg::Swap(Arg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    arrays_.Swap(&other->arrays_);
    offsets_.Swap(&other->offsets_);
    std::swap(dim_, other->dim_);
    std::swap(is_list_, other->is_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Arg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arg_descriptor_;
  metadata.reflection = Arg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RawArg::kNameFieldNumber;
const int RawArg::kValueFieldNumber;
const int RawArg::kFetchNeedFieldNumber;
const int RawArg::kServerAddrFieldNumber;
const int RawArg::kServerPortFieldNumber;
const int RawArg::kFetchIdFieldNumber;
const int RawArg::kDataSizeFieldNumber;
#endif  // !_MSC_VER

RawArg::RawArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:presto.RawArg)
}

void RawArg::InitAsDefaultInstance() {
}

RawArg::RawArg(const RawArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:presto.RawArg)
}

void RawArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetch_need_ = false;
  server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_port_ = 0;
  fetch_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawArg::~RawArg() {
  // @@protoc_insertion_point(destructor:presto.RawArg)
  SharedDtor();
}

void RawArg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (server_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_addr_;
  }
  if (fetch_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fetch_id_;
  }
  if (this != default_instance_) {
  }
}

void RawArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawArg_descriptor_;
}

const RawArg& RawArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

RawArg* RawArg::default_instance_ = NULL;

RawArg* RawArg::New() const {
  return new RawArg;
}

void RawArg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RawArg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(fetch_need_, server_port_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_server_addr()) {
      if (server_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_addr_->clear();
      }
    }
    if (has_fetch_id()) {
      if (fetch_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fetch_id_->clear();
      }
    }
    data_size_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:presto.RawArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fetch_need;
        break;
      }

      // required bool fetch_need = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_fetch_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_need_)));
          set_has_fetch_need();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_server_addr;
        break;
      }

      // optional string server_addr = 4;
      case 4: {
        if (tag == 34) {
         parse_server_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_addr().data(), this->server_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_server_port;
        break;
      }

      // optional int32 server_port = 5;
      case 5: {
        if (tag == 40) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fetch_id;
        break;
      }

      // optional string fetch_id = 6;
      case 6: {
        if (tag == 50) {
         parse_fetch_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fetch_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fetch_id().data(), this->fetch_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fetch_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_data_size;
        break;
      }

      // optional int64 data_size = 7;
      case 7: {
        if (tag == 56) {
         parse_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_size_)));
          set_has_data_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:presto.RawArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:presto.RawArg)
  return false;
#undef DO_
}

void RawArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:presto.RawArg)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // required bool fetch_need = 3 [default = false];
  if (has_fetch_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fetch_need(), output);
  }

  // optional string server_addr = 4;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_addr(), output);
  }

  // optional int32 server_port = 5;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->server_port(), output);
  }

  // optional string fetch_id = 6;
  if (has_fetch_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fetch_id().data(), this->fetch_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fetch_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fetch_id(), output);
  }

  // optional int64 data_size = 7;
  if (has_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->data_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:presto.RawArg)
}

::google::protobuf::uint8* RawArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:presto.RawArg)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // required bool fetch_need = 3 [default = false];
  if (has_fetch_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fetch_need(), target);
  }

  // optional string server_addr = 4;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_addr(), target);
  }

  // optional int32 server_port = 5;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->server_port(), target);
  }

  // optional string fetch_id = 6;
  if (has_fetch_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fetch_id().data(), this->fetch_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fetch_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fetch_id(), target);
  }

  // optional int64 data_size = 7;
  if (has_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->data_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:presto.RawArg)
  return target;
}

int RawArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required bool fetch_need = 3 [default = false];
    if (has_fetch_need()) {
      total_size += 1 + 1;
    }

    // optional string server_addr = 4;
    if (has_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_addr());
    }

    // optional int32 server_port = 5;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_port());
    }

    // optional string fetch_id = 6;
    if (has_fetch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fetch_id());
    }

    // optional int64 data_size = 7;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawArg::MergeFrom(const RawArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_fetch_need()) {
      set_fetch_need(from.fetch_need());
    }
    if (from.has_server_addr()) {
      set_server_addr(from.server_addr());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_fetch_id()) {
      set_fetch_id(from.fetch_id());
    }
    if (from.has_data_size()) {
      set_data_size(from.data_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawArg::CopyFrom(const RawArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void RawArg::Swap(RawArg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(fetch_need_, other->fetch_need_);
    std::swap(server_addr_, other->server_addr_);
    std::swap(server_port_, other->server_port_);
    std::swap(fetch_id_, other->fetch_id_);
    std::swap(data_size_, other->data_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RawArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawArg_descriptor_;
  metadata.reflection = RawArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewArg::kArraynameFieldNumber;
const int NewArg::kVarnameFieldNumber;
const int NewArg::kListArraynamesFieldNumber;
#endif  // !_MSC_VER

NewArg::NewArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:presto.NewArg)
}

void NewArg::InitAsDefaultInstance() {
}

NewArg::NewArg(const NewArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:presto.NewArg)
}

void NewArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  arrayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  varname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewArg::~NewArg() {
  // @@protoc_insertion_point(destructor:presto.NewArg)
  SharedDtor();
}

void NewArg::SharedDtor() {
  if (arrayname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arrayname_;
  }
  if (varname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete varname_;
  }
  if (this != default_instance_) {
  }
}

void NewArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewArg_descriptor_;
}

const NewArg& NewArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

NewArg* NewArg::default_instance_ = NULL;

NewArg* NewArg::New() const {
  return new NewArg;
}

void NewArg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_arrayname()) {
      if (arrayname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        arrayname_->clear();
      }
    }
    if (has_varname()) {
      if (varname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        varname_->clear();
      }
    }
  }
  list_arraynames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:presto.NewArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string arrayname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arrayname().data(), this->arrayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "arrayname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_varname;
        break;
      }

      // required string varname = 2;
      case 2: {
        if (tag == 18) {
         parse_varname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_varname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->varname().data(), this->varname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "varname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_arraynames;
        break;
      }

      // repeated string list_arraynames = 3;
      case 3: {
        if (tag == 26) {
         parse_list_arraynames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_list_arraynames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->list_arraynames(this->list_arraynames_size() - 1).data(),
            this->list_arraynames(this->list_arraynames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "list_arraynames");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_arraynames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:presto.NewArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:presto.NewArg)
  return false;
#undef DO_
}

void NewArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:presto.NewArg)
  // required string arrayname = 1;
  if (has_arrayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrayname().data(), this->arrayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arrayname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->arrayname(), output);
  }

  // required string varname = 2;
  if (has_varname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->varname().data(), this->varname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "varname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->varname(), output);
  }

  // repeated string list_arraynames = 3;
  for (int i = 0; i < this->list_arraynames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->list_arraynames(i).data(), this->list_arraynames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "list_arraynames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->list_arraynames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:presto.NewArg)
}

::google::protobuf::uint8* NewArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:presto.NewArg)
  // required string arrayname = 1;
  if (has_arrayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrayname().data(), this->arrayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arrayname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->arrayname(), target);
  }

  // required string varname = 2;
  if (has_varname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->varname().data(), this->varname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "varname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->varname(), target);
  }

  // repeated string list_arraynames = 3;
  for (int i = 0; i < this->list_arraynames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_arraynames(i).data(), this->list_arraynames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "list_arraynames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->list_arraynames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:presto.NewArg)
  return target;
}

int NewArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string arrayname = 1;
    if (has_arrayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arrayname());
    }

    // required string varname = 2;
    if (has_varname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->varname());
    }

  }
  // repeated string list_arraynames = 3;
  total_size += 1 * this->list_arraynames_size();
  for (int i = 0; i < this->list_arraynames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->list_arraynames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewArg::MergeFrom(const NewArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_arraynames_.MergeFrom(from.list_arraynames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arrayname()) {
      set_arrayname(from.arrayname());
    }
    if (from.has_varname()) {
      set_varname(from.varname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewArg::CopyFrom(const NewArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NewArg::Swap(NewArg* other) {
  if (other != this) {
    std::swap(arrayname_, other->arrayname_);
    std::swap(varname_, other->varname_);
    list_arraynames_.Swap(&other->list_arraynames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewArg_descriptor_;
  metadata.reflection = NewArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompositeArg::kArraynamesFieldNumber;
const int CompositeArg::kOffsetsFieldNumber;
const int CompositeArg::kDimFieldNumber;
const int CompositeArg::kVarnameFieldNumber;
#endif  // !_MSC_VER

CompositeArg::CompositeArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:presto.CompositeArg)
}

void CompositeArg::InitAsDefaultInstance() {
  dim_ = const_cast< ::presto::Tuple*>(&::presto::Tuple::default_instance());
}

CompositeArg::CompositeArg(const CompositeArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:presto.CompositeArg)
}

void CompositeArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dim_ = NULL;
  varname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositeArg::~CompositeArg() {
  // @@protoc_insertion_point(destructor:presto.CompositeArg)
  SharedDtor();
}

void CompositeArg::SharedDtor() {
  if (varname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete varname_;
  }
  if (this != default_instance_) {
    delete dim_;
  }
}

void CompositeArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompositeArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompositeArg_descriptor_;
}

const CompositeArg& CompositeArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

CompositeArg* CompositeArg::default_instance_ = NULL;

CompositeArg* CompositeArg::New() const {
  return new CompositeArg;
}

void CompositeArg::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    if (has_dim()) {
      if (dim_ != NULL) dim_->::presto::Tuple::Clear();
    }
    if (has_varname()) {
      if (varname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        varname_->clear();
      }
    }
  }
  arraynames_.Clear();
  offsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompositeArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:presto.CompositeArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string arraynames = 1;
      case 1: {
        if (tag == 10) {
         parse_arraynames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arraynames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arraynames(this->arraynames_size() - 1).data(),
            this->arraynames(this->arraynames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "arraynames");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_arraynames;
        if (input->ExpectTag(18)) goto parse_offsets;
        break;
      }

      // repeated .presto.Tuple offsets = 2;
      case 2: {
        if (tag == 18) {
         parse_offsets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offsets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offsets;
        if (input->ExpectTag(26)) goto parse_dim;
        break;
      }

      // required .presto.Tuple dim = 3;
      case 3: {
        if (tag == 26) {
         parse_dim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_varname;
        break;
      }

      // required string varname = 4;
      case 4: {
        if (tag == 34) {
         parse_varname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_varname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->varname().data(), this->varname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "varname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:presto.CompositeArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:presto.CompositeArg)
  return false;
#undef DO_
}

void CompositeArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:presto.CompositeArg)
  // repeated string arraynames = 1;
  for (int i = 0; i < this->arraynames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->arraynames(i).data(), this->arraynames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "arraynames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->arraynames(i), output);
  }

  // repeated .presto.Tuple offsets = 2;
  for (int i = 0; i < this->offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->offsets(i), output);
  }

  // required .presto.Tuple dim = 3;
  if (has_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dim(), output);
  }

  // required string varname = 4;
  if (has_varname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->varname().data(), this->varname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "varname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->varname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:presto.CompositeArg)
}

::google::protobuf::uint8* CompositeArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:presto.CompositeArg)
  // repeated string arraynames = 1;
  for (int i = 0; i < this->arraynames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arraynames(i).data(), this->arraynames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arraynames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->arraynames(i), target);
  }

  // repeated .presto.Tuple offsets = 2;
  for (int i = 0; i < this->offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->offsets(i), target);
  }

  // required .presto.Tuple dim = 3;
  if (has_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dim(), target);
  }

  // required string varname = 4;
  if (has_varname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->varname().data(), this->varname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "varname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->varname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:presto.CompositeArg)
  return target;
}

int CompositeArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .presto.Tuple dim = 3;
    if (has_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dim());
    }

    // required string varname = 4;
    if (has_varname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->varname());
    }

  }
  // repeated string arraynames = 1;
  total_size += 1 * this->arraynames_size();
  for (int i = 0; i < this->arraynames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arraynames(i));
  }

  // repeated .presto.Tuple offsets = 2;
  total_size += 1 * this->offsets_size();
  for (int i = 0; i < this->offsets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offsets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositeArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompositeArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompositeArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompositeArg::MergeFrom(const CompositeArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  arraynames_.MergeFrom(from.arraynames_);
  offsets_.MergeFrom(from.offsets_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_dim()) {
      mutable_dim()->::presto::Tuple::MergeFrom(from.dim());
    }
    if (from.has_varname()) {
      set_varname(from.varname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompositeArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositeArg::CopyFrom(const CompositeArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositeArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void CompositeArg::Swap(CompositeArg* other) {
  if (other != this) {
    arraynames_.Swap(&other->arraynames_);
    offsets_.Swap(&other->offsets_);
    std::swap(dim_, other->dim_);
    std::swap(varname_, other->varname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompositeArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompositeArg_descriptor_;
  metadata.reflection = CompositeArg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace presto

// @@protoc_insertion_point(global_scope)
