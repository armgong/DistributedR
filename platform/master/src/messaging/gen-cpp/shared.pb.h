// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#ifndef PROTOBUF_shared_2eproto__INCLUDED
#define PROTOBUF_shared_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace presto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_shared_2eproto();
void protobuf_AssignDesc_shared_2eproto();
void protobuf_ShutdownFile_shared_2eproto();

class Response;
class ServerInfo;
class ServerConfig;
class Tuple;
class Array;
class Arg;
class RawArg;
class NewArg;
class CompositeArg;

enum Response_Status {
  Response_Status_OK = 1,
  Response_Status_ERROR = 2
};
bool Response_Status_IsValid(int value);
const Response_Status Response_Status_Status_MIN = Response_Status_OK;
const Response_Status Response_Status_Status_MAX = Response_Status_ERROR;
const int Response_Status_Status_ARRAYSIZE = Response_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Status_descriptor();
inline const ::std::string& Response_Status_Name(Response_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Status_descriptor(), value);
}
inline bool Response_Status_Parse(
    const ::std::string& name, Response_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Status>(
    Response_Status_descriptor(), name, value);
}
// ===================================================================

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_Status Status;
  static const Status OK = Response_Status_OK;
  static const Status ERROR = Response_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return Response_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Response_Status_Status_MIN;
  static const Status Status_MAX =
    Response_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Response_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Response_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Response_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Response_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .presto.Response.Status status = 1 [default = OK];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::presto::Response_Status status() const;
  inline void set_status(::presto::Response_Status value);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Response)
  // @@protoc_insertion_point(class_scope:presto.Response)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  int status_;
  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 presto_port = 2;
  inline bool has_presto_port() const;
  inline void clear_presto_port();
  static const int kPrestoPortFieldNumber = 2;
  inline ::google::protobuf::int32 presto_port() const;
  inline void set_presto_port(::google::protobuf::int32 value);

  // optional int32 start_port_range = 3 [default = 50000];
  inline bool has_start_port_range() const;
  inline void clear_start_port_range();
  static const int kStartPortRangeFieldNumber = 3;
  inline ::google::protobuf::int32 start_port_range() const;
  inline void set_start_port_range(::google::protobuf::int32 value);

  // optional int32 end_port_range = 4 [default = 50100];
  inline bool has_end_port_range() const;
  inline void clear_end_port_range();
  static const int kEndPortRangeFieldNumber = 4;
  inline ::google::protobuf::int32 end_port_range() const;
  inline void set_end_port_range(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:presto.ServerInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_presto_port();
  inline void clear_has_presto_port();
  inline void set_has_start_port_range();
  inline void clear_has_start_port_range();
  inline void set_has_end_port_range();
  inline void clear_has_end_port_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 presto_port_;
  ::google::protobuf::int32 start_port_range_;
  ::google::protobuf::int32 end_port_range_;
  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  void Swap(ServerConfig* other);

  // implements Message ----------------------------------------------

  ServerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .presto.ServerInfo servers = 1;
  inline int servers_size() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 1;
  inline const ::presto::ServerInfo& servers(int index) const;
  inline ::presto::ServerInfo* mutable_servers(int index);
  inline ::presto::ServerInfo* add_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::presto::ServerInfo >&
      servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::presto::ServerInfo >*
      mutable_servers();

  // @@protoc_insertion_point(class_scope:presto.ServerConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::presto::ServerInfo > servers_;
  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static ServerConfig* default_instance_;
};
// -------------------------------------------------------------------

class Tuple : public ::google::protobuf::Message {
 public:
  Tuple();
  virtual ~Tuple();

  Tuple(const Tuple& from);

  inline Tuple& operator=(const Tuple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tuple& default_instance();

  void Swap(Tuple* other);

  // implements Message ----------------------------------------------

  Tuple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tuple& from);
  void MergeFrom(const Tuple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 val = 1;
  inline int val_size() const;
  inline void clear_val();
  static const int kValFieldNumber = 1;
  inline ::google::protobuf::int64 val(int index) const;
  inline void set_val(int index, ::google::protobuf::int64 value);
  inline void add_val(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      val() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:presto.Tuple)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > val_;
  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static Tuple* default_instance_;
};
// -------------------------------------------------------------------

class Array : public ::google::protobuf::Message {
 public:
  Array();
  virtual ~Array();

  Array(const Array& from);

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Array& default_instance();

  void Swap(Array* other);

  // implements Message ----------------------------------------------

  Array* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .presto.Tuple dim = 2;
  inline bool has_dim() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 2;
  inline const ::presto::Tuple& dim() const;
  inline ::presto::Tuple* mutable_dim();
  inline ::presto::Tuple* release_dim();
  inline void set_allocated_dim(::presto::Tuple* dim);

  // optional int64 size = 3 [default = 0];
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);

  // optional bool sparse = 4 [default = false];
  inline bool has_sparse() const;
  inline void clear_sparse();
  static const int kSparseFieldNumber = 4;
  inline bool sparse() const;
  inline void set_sparse(bool value);

  // @@protoc_insertion_point(class_scope:presto.Array)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_dim();
  inline void clear_has_dim();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_sparse();
  inline void clear_has_sparse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::presto::Tuple* dim_;
  ::google::protobuf::int64 size_;
  bool sparse_;
  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static Array* default_instance_;
};
// -------------------------------------------------------------------

class Arg : public ::google::protobuf::Message {
 public:
  Arg();
  virtual ~Arg();

  Arg(const Arg& from);

  inline Arg& operator=(const Arg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Arg& default_instance();

  void Swap(Arg* other);

  // implements Message ----------------------------------------------

  Arg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Arg& from);
  void MergeFrom(const Arg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .presto.Array arrays = 2;
  inline int arrays_size() const;
  inline void clear_arrays();
  static const int kArraysFieldNumber = 2;
  inline const ::presto::Array& arrays(int index) const;
  inline ::presto::Array* mutable_arrays(int index);
  inline ::presto::Array* add_arrays();
  inline const ::google::protobuf::RepeatedPtrField< ::presto::Array >&
      arrays() const;
  inline ::google::protobuf::RepeatedPtrField< ::presto::Array >*
      mutable_arrays();

  // repeated .presto.Tuple offsets = 3;
  inline int offsets_size() const;
  inline void clear_offsets();
  static const int kOffsetsFieldNumber = 3;
  inline const ::presto::Tuple& offsets(int index) const;
  inline ::presto::Tuple* mutable_offsets(int index);
  inline ::presto::Tuple* add_offsets();
  inline const ::google::protobuf::RepeatedPtrField< ::presto::Tuple >&
      offsets() const;
  inline ::google::protobuf::RepeatedPtrField< ::presto::Tuple >*
      mutable_offsets();

  // optional .presto.Tuple dim = 4;
  inline bool has_dim() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 4;
  inline const ::presto::Tuple& dim() const;
  inline ::presto::Tuple* mutable_dim();
  inline ::presto::Tuple* release_dim();
  inline void set_allocated_dim(::presto::Tuple* dim);

  // optional bool is_list = 5;
  inline bool has_is_list() const;
  inline void clear_is_list();
  static const int kIsListFieldNumber = 5;
  inline bool is_list() const;
  inline void set_is_list(bool value);

  // @@protoc_insertion_point(class_scope:presto.Arg)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_dim();
  inline void clear_has_dim();
  inline void set_has_is_list();
  inline void clear_has_is_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::presto::Array > arrays_;
  ::google::protobuf::RepeatedPtrField< ::presto::Tuple > offsets_;
  ::presto::Tuple* dim_;
  bool is_list_;
  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static Arg* default_instance_;
};
// -------------------------------------------------------------------

class RawArg : public ::google::protobuf::Message {
 public:
  RawArg();
  virtual ~RawArg();

  RawArg(const RawArg& from);

  inline RawArg& operator=(const RawArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawArg& default_instance();

  void Swap(RawArg* other);

  // implements Message ----------------------------------------------

  RawArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawArg& from);
  void MergeFrom(const RawArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required bool fetch_need = 3 [default = false];
  inline bool has_fetch_need() const;
  inline void clear_fetch_need();
  static const int kFetchNeedFieldNumber = 3;
  inline bool fetch_need() const;
  inline void set_fetch_need(bool value);

  // optional string server_addr = 4;
  inline bool has_server_addr() const;
  inline void clear_server_addr();
  static const int kServerAddrFieldNumber = 4;
  inline const ::std::string& server_addr() const;
  inline void set_server_addr(const ::std::string& value);
  inline void set_server_addr(const char* value);
  inline void set_server_addr(const char* value, size_t size);
  inline ::std::string* mutable_server_addr();
  inline ::std::string* release_server_addr();
  inline void set_allocated_server_addr(::std::string* server_addr);

  // optional int32 server_port = 5;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 5;
  inline ::google::protobuf::int32 server_port() const;
  inline void set_server_port(::google::protobuf::int32 value);

  // optional string fetch_id = 6;
  inline bool has_fetch_id() const;
  inline void clear_fetch_id();
  static const int kFetchIdFieldNumber = 6;
  inline const ::std::string& fetch_id() const;
  inline void set_fetch_id(const ::std::string& value);
  inline void set_fetch_id(const char* value);
  inline void set_fetch_id(const char* value, size_t size);
  inline ::std::string* mutable_fetch_id();
  inline ::std::string* release_fetch_id();
  inline void set_allocated_fetch_id(::std::string* fetch_id);

  // optional int64 data_size = 7;
  inline bool has_data_size() const;
  inline void clear_data_size();
  static const int kDataSizeFieldNumber = 7;
  inline ::google::protobuf::int64 data_size() const;
  inline void set_data_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:presto.RawArg)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_fetch_need();
  inline void clear_has_fetch_need();
  inline void set_has_server_addr();
  inline void clear_has_server_addr();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  inline void set_has_fetch_id();
  inline void clear_has_fetch_id();
  inline void set_has_data_size();
  inline void clear_has_data_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* value_;
  ::std::string* server_addr_;
  bool fetch_need_;
  ::google::protobuf::int32 server_port_;
  ::std::string* fetch_id_;
  ::google::protobuf::int64 data_size_;
  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static RawArg* default_instance_;
};
// -------------------------------------------------------------------

class NewArg : public ::google::protobuf::Message {
 public:
  NewArg();
  virtual ~NewArg();

  NewArg(const NewArg& from);

  inline NewArg& operator=(const NewArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewArg& default_instance();

  void Swap(NewArg* other);

  // implements Message ----------------------------------------------

  NewArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewArg& from);
  void MergeFrom(const NewArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string arrayname = 1;
  inline bool has_arrayname() const;
  inline void clear_arrayname();
  static const int kArraynameFieldNumber = 1;
  inline const ::std::string& arrayname() const;
  inline void set_arrayname(const ::std::string& value);
  inline void set_arrayname(const char* value);
  inline void set_arrayname(const char* value, size_t size);
  inline ::std::string* mutable_arrayname();
  inline ::std::string* release_arrayname();
  inline void set_allocated_arrayname(::std::string* arrayname);

  // required string varname = 2;
  inline bool has_varname() const;
  inline void clear_varname();
  static const int kVarnameFieldNumber = 2;
  inline const ::std::string& varname() const;
  inline void set_varname(const ::std::string& value);
  inline void set_varname(const char* value);
  inline void set_varname(const char* value, size_t size);
  inline ::std::string* mutable_varname();
  inline ::std::string* release_varname();
  inline void set_allocated_varname(::std::string* varname);

  // repeated string list_arraynames = 3;
  inline int list_arraynames_size() const;
  inline void clear_list_arraynames();
  static const int kListArraynamesFieldNumber = 3;
  inline const ::std::string& list_arraynames(int index) const;
  inline ::std::string* mutable_list_arraynames(int index);
  inline void set_list_arraynames(int index, const ::std::string& value);
  inline void set_list_arraynames(int index, const char* value);
  inline void set_list_arraynames(int index, const char* value, size_t size);
  inline ::std::string* add_list_arraynames();
  inline void add_list_arraynames(const ::std::string& value);
  inline void add_list_arraynames(const char* value);
  inline void add_list_arraynames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& list_arraynames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list_arraynames();

  // @@protoc_insertion_point(class_scope:presto.NewArg)
 private:
  inline void set_has_arrayname();
  inline void clear_has_arrayname();
  inline void set_has_varname();
  inline void clear_has_varname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* arrayname_;
  ::std::string* varname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_arraynames_;
  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static NewArg* default_instance_;
};
// -------------------------------------------------------------------

class CompositeArg : public ::google::protobuf::Message {
 public:
  CompositeArg();
  virtual ~CompositeArg();

  CompositeArg(const CompositeArg& from);

  inline CompositeArg& operator=(const CompositeArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositeArg& default_instance();

  void Swap(CompositeArg* other);

  // implements Message ----------------------------------------------

  CompositeArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompositeArg& from);
  void MergeFrom(const CompositeArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string arraynames = 1;
  inline int arraynames_size() const;
  inline void clear_arraynames();
  static const int kArraynamesFieldNumber = 1;
  inline const ::std::string& arraynames(int index) const;
  inline ::std::string* mutable_arraynames(int index);
  inline void set_arraynames(int index, const ::std::string& value);
  inline void set_arraynames(int index, const char* value);
  inline void set_arraynames(int index, const char* value, size_t size);
  inline ::std::string* add_arraynames();
  inline void add_arraynames(const ::std::string& value);
  inline void add_arraynames(const char* value);
  inline void add_arraynames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& arraynames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_arraynames();

  // repeated .presto.Tuple offsets = 2;
  inline int offsets_size() const;
  inline void clear_offsets();
  static const int kOffsetsFieldNumber = 2;
  inline const ::presto::Tuple& offsets(int index) const;
  inline ::presto::Tuple* mutable_offsets(int index);
  inline ::presto::Tuple* add_offsets();
  inline const ::google::protobuf::RepeatedPtrField< ::presto::Tuple >&
      offsets() const;
  inline ::google::protobuf::RepeatedPtrField< ::presto::Tuple >*
      mutable_offsets();

  // required .presto.Tuple dim = 3;
  inline bool has_dim() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 3;
  inline const ::presto::Tuple& dim() const;
  inline ::presto::Tuple* mutable_dim();
  inline ::presto::Tuple* release_dim();
  inline void set_allocated_dim(::presto::Tuple* dim);

  // required string varname = 4;
  inline bool has_varname() const;
  inline void clear_varname();
  static const int kVarnameFieldNumber = 4;
  inline const ::std::string& varname() const;
  inline void set_varname(const ::std::string& value);
  inline void set_varname(const char* value);
  inline void set_varname(const char* value, size_t size);
  inline ::std::string* mutable_varname();
  inline ::std::string* release_varname();
  inline void set_allocated_varname(::std::string* varname);

  // @@protoc_insertion_point(class_scope:presto.CompositeArg)
 private:
  inline void set_has_dim();
  inline void clear_has_dim();
  inline void set_has_varname();
  inline void clear_has_varname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> arraynames_;
  ::google::protobuf::RepeatedPtrField< ::presto::Tuple > offsets_;
  ::presto::Tuple* dim_;
  ::std::string* varname_;
  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static CompositeArg* default_instance_;
};
// ===================================================================


// ===================================================================

// Response

// optional .presto.Response.Status status = 1 [default = OK];
inline bool Response::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::presto::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:presto.Response.status)
  return static_cast< ::presto::Response_Status >(status_);
}
inline void Response::set_status(::presto::Response_Status value) {
  assert(::presto::Response_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:presto.Response.status)
}

// optional string msg = 2;
inline bool Response::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Response::msg() const {
  // @@protoc_insertion_point(field_get:presto.Response.msg)
  return *msg_;
}
inline void Response::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:presto.Response.msg)
}
inline void Response::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.Response.msg)
}
inline void Response::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.Response.msg)
}
inline ::std::string* Response::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.Response.msg)
  return msg_;
}
inline ::std::string* Response::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Response::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.Response.msg)
}

// -------------------------------------------------------------------

// ServerInfo

// required string name = 1;
inline bool ServerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServerInfo::name() const {
  // @@protoc_insertion_point(field_get:presto.ServerInfo.name)
  return *name_;
}
inline void ServerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:presto.ServerInfo.name)
}
inline void ServerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.ServerInfo.name)
}
inline void ServerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.ServerInfo.name)
}
inline ::std::string* ServerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.ServerInfo.name)
  return name_;
}
inline ::std::string* ServerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.ServerInfo.name)
}

// required int32 presto_port = 2;
inline bool ServerInfo::has_presto_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_presto_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_presto_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_presto_port() {
  presto_port_ = 0;
  clear_has_presto_port();
}
inline ::google::protobuf::int32 ServerInfo::presto_port() const {
  // @@protoc_insertion_point(field_get:presto.ServerInfo.presto_port)
  return presto_port_;
}
inline void ServerInfo::set_presto_port(::google::protobuf::int32 value) {
  set_has_presto_port();
  presto_port_ = value;
  // @@protoc_insertion_point(field_set:presto.ServerInfo.presto_port)
}

// optional int32 start_port_range = 3 [default = 50000];
inline bool ServerInfo::has_start_port_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfo::set_has_start_port_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInfo::clear_has_start_port_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfo::clear_start_port_range() {
  start_port_range_ = 50000;
  clear_has_start_port_range();
}
inline ::google::protobuf::int32 ServerInfo::start_port_range() const {
  // @@protoc_insertion_point(field_get:presto.ServerInfo.start_port_range)
  return start_port_range_;
}
inline void ServerInfo::set_start_port_range(::google::protobuf::int32 value) {
  set_has_start_port_range();
  start_port_range_ = value;
  // @@protoc_insertion_point(field_set:presto.ServerInfo.start_port_range)
}

// optional int32 end_port_range = 4 [default = 50100];
inline bool ServerInfo::has_end_port_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerInfo::set_has_end_port_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerInfo::clear_has_end_port_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerInfo::clear_end_port_range() {
  end_port_range_ = 50100;
  clear_has_end_port_range();
}
inline ::google::protobuf::int32 ServerInfo::end_port_range() const {
  // @@protoc_insertion_point(field_get:presto.ServerInfo.end_port_range)
  return end_port_range_;
}
inline void ServerInfo::set_end_port_range(::google::protobuf::int32 value) {
  set_has_end_port_range();
  end_port_range_ = value;
  // @@protoc_insertion_point(field_set:presto.ServerInfo.end_port_range)
}

// -------------------------------------------------------------------

// ServerConfig

// repeated .presto.ServerInfo servers = 1;
inline int ServerConfig::servers_size() const {
  return servers_.size();
}
inline void ServerConfig::clear_servers() {
  servers_.Clear();
}
inline const ::presto::ServerInfo& ServerConfig::servers(int index) const {
  // @@protoc_insertion_point(field_get:presto.ServerConfig.servers)
  return servers_.Get(index);
}
inline ::presto::ServerInfo* ServerConfig::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:presto.ServerConfig.servers)
  return servers_.Mutable(index);
}
inline ::presto::ServerInfo* ServerConfig::add_servers() {
  // @@protoc_insertion_point(field_add:presto.ServerConfig.servers)
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::presto::ServerInfo >&
ServerConfig::servers() const {
  // @@protoc_insertion_point(field_list:presto.ServerConfig.servers)
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::presto::ServerInfo >*
ServerConfig::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:presto.ServerConfig.servers)
  return &servers_;
}

// -------------------------------------------------------------------

// Tuple

// repeated int64 val = 1;
inline int Tuple::val_size() const {
  return val_.size();
}
inline void Tuple::clear_val() {
  val_.Clear();
}
inline ::google::protobuf::int64 Tuple::val(int index) const {
  // @@protoc_insertion_point(field_get:presto.Tuple.val)
  return val_.Get(index);
}
inline void Tuple::set_val(int index, ::google::protobuf::int64 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:presto.Tuple.val)
}
inline void Tuple::add_val(::google::protobuf::int64 value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:presto.Tuple.val)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Tuple::val() const {
  // @@protoc_insertion_point(field_list:presto.Tuple.val)
  return val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Tuple::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:presto.Tuple.val)
  return &val_;
}

// -------------------------------------------------------------------

// Array

// required string name = 1;
inline bool Array::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Array::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Array::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Array::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Array::name() const {
  // @@protoc_insertion_point(field_get:presto.Array.name)
  return *name_;
}
inline void Array::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:presto.Array.name)
}
inline void Array::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.Array.name)
}
inline void Array::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.Array.name)
}
inline ::std::string* Array::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.Array.name)
  return name_;
}
inline ::std::string* Array::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Array::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.Array.name)
}

// required .presto.Tuple dim = 2;
inline bool Array::has_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Array::set_has_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Array::clear_has_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Array::clear_dim() {
  if (dim_ != NULL) dim_->::presto::Tuple::Clear();
  clear_has_dim();
}
inline const ::presto::Tuple& Array::dim() const {
  // @@protoc_insertion_point(field_get:presto.Array.dim)
  return dim_ != NULL ? *dim_ : *default_instance_->dim_;
}
inline ::presto::Tuple* Array::mutable_dim() {
  set_has_dim();
  if (dim_ == NULL) dim_ = new ::presto::Tuple;
  // @@protoc_insertion_point(field_mutable:presto.Array.dim)
  return dim_;
}
inline ::presto::Tuple* Array::release_dim() {
  clear_has_dim();
  ::presto::Tuple* temp = dim_;
  dim_ = NULL;
  return temp;
}
inline void Array::set_allocated_dim(::presto::Tuple* dim) {
  delete dim_;
  dim_ = dim;
  if (dim) {
    set_has_dim();
  } else {
    clear_has_dim();
  }
  // @@protoc_insertion_point(field_set_allocated:presto.Array.dim)
}

// optional int64 size = 3 [default = 0];
inline bool Array::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Array::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Array::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Array::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 Array::size() const {
  // @@protoc_insertion_point(field_get:presto.Array.size)
  return size_;
}
inline void Array::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:presto.Array.size)
}

// optional bool sparse = 4 [default = false];
inline bool Array::has_sparse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Array::set_has_sparse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Array::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Array::clear_sparse() {
  sparse_ = false;
  clear_has_sparse();
}
inline bool Array::sparse() const {
  // @@protoc_insertion_point(field_get:presto.Array.sparse)
  return sparse_;
}
inline void Array::set_sparse(bool value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:presto.Array.sparse)
}

// -------------------------------------------------------------------

// Arg

// required string name = 1;
inline bool Arg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Arg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Arg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Arg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Arg::name() const {
  // @@protoc_insertion_point(field_get:presto.Arg.name)
  return *name_;
}
inline void Arg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:presto.Arg.name)
}
inline void Arg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.Arg.name)
}
inline void Arg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.Arg.name)
}
inline ::std::string* Arg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.Arg.name)
  return name_;
}
inline ::std::string* Arg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Arg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.Arg.name)
}

// repeated .presto.Array arrays = 2;
inline int Arg::arrays_size() const {
  return arrays_.size();
}
inline void Arg::clear_arrays() {
  arrays_.Clear();
}
inline const ::presto::Array& Arg::arrays(int index) const {
  // @@protoc_insertion_point(field_get:presto.Arg.arrays)
  return arrays_.Get(index);
}
inline ::presto::Array* Arg::mutable_arrays(int index) {
  // @@protoc_insertion_point(field_mutable:presto.Arg.arrays)
  return arrays_.Mutable(index);
}
inline ::presto::Array* Arg::add_arrays() {
  // @@protoc_insertion_point(field_add:presto.Arg.arrays)
  return arrays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::presto::Array >&
Arg::arrays() const {
  // @@protoc_insertion_point(field_list:presto.Arg.arrays)
  return arrays_;
}
inline ::google::protobuf::RepeatedPtrField< ::presto::Array >*
Arg::mutable_arrays() {
  // @@protoc_insertion_point(field_mutable_list:presto.Arg.arrays)
  return &arrays_;
}

// repeated .presto.Tuple offsets = 3;
inline int Arg::offsets_size() const {
  return offsets_.size();
}
inline void Arg::clear_offsets() {
  offsets_.Clear();
}
inline const ::presto::Tuple& Arg::offsets(int index) const {
  // @@protoc_insertion_point(field_get:presto.Arg.offsets)
  return offsets_.Get(index);
}
inline ::presto::Tuple* Arg::mutable_offsets(int index) {
  // @@protoc_insertion_point(field_mutable:presto.Arg.offsets)
  return offsets_.Mutable(index);
}
inline ::presto::Tuple* Arg::add_offsets() {
  // @@protoc_insertion_point(field_add:presto.Arg.offsets)
  return offsets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::presto::Tuple >&
Arg::offsets() const {
  // @@protoc_insertion_point(field_list:presto.Arg.offsets)
  return offsets_;
}
inline ::google::protobuf::RepeatedPtrField< ::presto::Tuple >*
Arg::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:presto.Arg.offsets)
  return &offsets_;
}

// optional .presto.Tuple dim = 4;
inline bool Arg::has_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Arg::set_has_dim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Arg::clear_has_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Arg::clear_dim() {
  if (dim_ != NULL) dim_->::presto::Tuple::Clear();
  clear_has_dim();
}
inline const ::presto::Tuple& Arg::dim() const {
  // @@protoc_insertion_point(field_get:presto.Arg.dim)
  return dim_ != NULL ? *dim_ : *default_instance_->dim_;
}
inline ::presto::Tuple* Arg::mutable_dim() {
  set_has_dim();
  if (dim_ == NULL) dim_ = new ::presto::Tuple;
  // @@protoc_insertion_point(field_mutable:presto.Arg.dim)
  return dim_;
}
inline ::presto::Tuple* Arg::release_dim() {
  clear_has_dim();
  ::presto::Tuple* temp = dim_;
  dim_ = NULL;
  return temp;
}
inline void Arg::set_allocated_dim(::presto::Tuple* dim) {
  delete dim_;
  dim_ = dim;
  if (dim) {
    set_has_dim();
  } else {
    clear_has_dim();
  }
  // @@protoc_insertion_point(field_set_allocated:presto.Arg.dim)
}

// optional bool is_list = 5;
inline bool Arg::has_is_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Arg::set_has_is_list() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Arg::clear_has_is_list() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Arg::clear_is_list() {
  is_list_ = false;
  clear_has_is_list();
}
inline bool Arg::is_list() const {
  // @@protoc_insertion_point(field_get:presto.Arg.is_list)
  return is_list_;
}
inline void Arg::set_is_list(bool value) {
  set_has_is_list();
  is_list_ = value;
  // @@protoc_insertion_point(field_set:presto.Arg.is_list)
}

// -------------------------------------------------------------------

// RawArg

// required string name = 1;
inline bool RawArg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawArg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawArg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawArg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RawArg::name() const {
  // @@protoc_insertion_point(field_get:presto.RawArg.name)
  return *name_;
}
inline void RawArg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:presto.RawArg.name)
}
inline void RawArg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.RawArg.name)
}
inline void RawArg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.RawArg.name)
}
inline ::std::string* RawArg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.RawArg.name)
  return name_;
}
inline ::std::string* RawArg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RawArg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.RawArg.name)
}

// optional bytes value = 2;
inline bool RawArg::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RawArg::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RawArg::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RawArg::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& RawArg::value() const {
  // @@protoc_insertion_point(field_get:presto.RawArg.value)
  return *value_;
}
inline void RawArg::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:presto.RawArg.value)
}
inline void RawArg::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.RawArg.value)
}
inline void RawArg::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.RawArg.value)
}
inline ::std::string* RawArg::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.RawArg.value)
  return value_;
}
inline ::std::string* RawArg::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RawArg::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.RawArg.value)
}

// required bool fetch_need = 3 [default = false];
inline bool RawArg::has_fetch_need() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RawArg::set_has_fetch_need() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RawArg::clear_has_fetch_need() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RawArg::clear_fetch_need() {
  fetch_need_ = false;
  clear_has_fetch_need();
}
inline bool RawArg::fetch_need() const {
  // @@protoc_insertion_point(field_get:presto.RawArg.fetch_need)
  return fetch_need_;
}
inline void RawArg::set_fetch_need(bool value) {
  set_has_fetch_need();
  fetch_need_ = value;
  // @@protoc_insertion_point(field_set:presto.RawArg.fetch_need)
}

// optional string server_addr = 4;
inline bool RawArg::has_server_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RawArg::set_has_server_addr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RawArg::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RawArg::clear_server_addr() {
  if (server_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_addr_->clear();
  }
  clear_has_server_addr();
}
inline const ::std::string& RawArg::server_addr() const {
  // @@protoc_insertion_point(field_get:presto.RawArg.server_addr)
  return *server_addr_;
}
inline void RawArg::set_server_addr(const ::std::string& value) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(value);
  // @@protoc_insertion_point(field_set:presto.RawArg.server_addr)
}
inline void RawArg::set_server_addr(const char* value) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.RawArg.server_addr)
}
inline void RawArg::set_server_addr(const char* value, size_t size) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.RawArg.server_addr)
}
inline ::std::string* RawArg::mutable_server_addr() {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.RawArg.server_addr)
  return server_addr_;
}
inline ::std::string* RawArg::release_server_addr() {
  clear_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = server_addr_;
    server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RawArg::set_allocated_server_addr(::std::string* server_addr) {
  if (server_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_addr_;
  }
  if (server_addr) {
    set_has_server_addr();
    server_addr_ = server_addr;
  } else {
    clear_has_server_addr();
    server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.RawArg.server_addr)
}

// optional int32 server_port = 5;
inline bool RawArg::has_server_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RawArg::set_has_server_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RawArg::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RawArg::clear_server_port() {
  server_port_ = 0;
  clear_has_server_port();
}
inline ::google::protobuf::int32 RawArg::server_port() const {
  // @@protoc_insertion_point(field_get:presto.RawArg.server_port)
  return server_port_;
}
inline void RawArg::set_server_port(::google::protobuf::int32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:presto.RawArg.server_port)
}

// optional string fetch_id = 6;
inline bool RawArg::has_fetch_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RawArg::set_has_fetch_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RawArg::clear_has_fetch_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RawArg::clear_fetch_id() {
  if (fetch_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fetch_id_->clear();
  }
  clear_has_fetch_id();
}
inline const ::std::string& RawArg::fetch_id() const {
  // @@protoc_insertion_point(field_get:presto.RawArg.fetch_id)
  return *fetch_id_;
}
inline void RawArg::set_fetch_id(const ::std::string& value) {
  set_has_fetch_id();
  if (fetch_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fetch_id_ = new ::std::string;
  }
  fetch_id_->assign(value);
  // @@protoc_insertion_point(field_set:presto.RawArg.fetch_id)
}
inline void RawArg::set_fetch_id(const char* value) {
  set_has_fetch_id();
  if (fetch_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fetch_id_ = new ::std::string;
  }
  fetch_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.RawArg.fetch_id)
}
inline void RawArg::set_fetch_id(const char* value, size_t size) {
  set_has_fetch_id();
  if (fetch_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fetch_id_ = new ::std::string;
  }
  fetch_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.RawArg.fetch_id)
}
inline ::std::string* RawArg::mutable_fetch_id() {
  set_has_fetch_id();
  if (fetch_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fetch_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.RawArg.fetch_id)
  return fetch_id_;
}
inline ::std::string* RawArg::release_fetch_id() {
  clear_has_fetch_id();
  if (fetch_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fetch_id_;
    fetch_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RawArg::set_allocated_fetch_id(::std::string* fetch_id) {
  if (fetch_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fetch_id_;
  }
  if (fetch_id) {
    set_has_fetch_id();
    fetch_id_ = fetch_id;
  } else {
    clear_has_fetch_id();
    fetch_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.RawArg.fetch_id)
}

// optional int64 data_size = 7;
inline bool RawArg::has_data_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RawArg::set_has_data_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RawArg::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RawArg::clear_data_size() {
  data_size_ = GOOGLE_LONGLONG(0);
  clear_has_data_size();
}
inline ::google::protobuf::int64 RawArg::data_size() const {
  // @@protoc_insertion_point(field_get:presto.RawArg.data_size)
  return data_size_;
}
inline void RawArg::set_data_size(::google::protobuf::int64 value) {
  set_has_data_size();
  data_size_ = value;
  // @@protoc_insertion_point(field_set:presto.RawArg.data_size)
}

// -------------------------------------------------------------------

// NewArg

// required string arrayname = 1;
inline bool NewArg::has_arrayname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewArg::set_has_arrayname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewArg::clear_has_arrayname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewArg::clear_arrayname() {
  if (arrayname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    arrayname_->clear();
  }
  clear_has_arrayname();
}
inline const ::std::string& NewArg::arrayname() const {
  // @@protoc_insertion_point(field_get:presto.NewArg.arrayname)
  return *arrayname_;
}
inline void NewArg::set_arrayname(const ::std::string& value) {
  set_has_arrayname();
  if (arrayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    arrayname_ = new ::std::string;
  }
  arrayname_->assign(value);
  // @@protoc_insertion_point(field_set:presto.NewArg.arrayname)
}
inline void NewArg::set_arrayname(const char* value) {
  set_has_arrayname();
  if (arrayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    arrayname_ = new ::std::string;
  }
  arrayname_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.NewArg.arrayname)
}
inline void NewArg::set_arrayname(const char* value, size_t size) {
  set_has_arrayname();
  if (arrayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    arrayname_ = new ::std::string;
  }
  arrayname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.NewArg.arrayname)
}
inline ::std::string* NewArg::mutable_arrayname() {
  set_has_arrayname();
  if (arrayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    arrayname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.NewArg.arrayname)
  return arrayname_;
}
inline ::std::string* NewArg::release_arrayname() {
  clear_has_arrayname();
  if (arrayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = arrayname_;
    arrayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewArg::set_allocated_arrayname(::std::string* arrayname) {
  if (arrayname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arrayname_;
  }
  if (arrayname) {
    set_has_arrayname();
    arrayname_ = arrayname;
  } else {
    clear_has_arrayname();
    arrayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.NewArg.arrayname)
}

// required string varname = 2;
inline bool NewArg::has_varname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewArg::set_has_varname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewArg::clear_has_varname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewArg::clear_varname() {
  if (varname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    varname_->clear();
  }
  clear_has_varname();
}
inline const ::std::string& NewArg::varname() const {
  // @@protoc_insertion_point(field_get:presto.NewArg.varname)
  return *varname_;
}
inline void NewArg::set_varname(const ::std::string& value) {
  set_has_varname();
  if (varname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    varname_ = new ::std::string;
  }
  varname_->assign(value);
  // @@protoc_insertion_point(field_set:presto.NewArg.varname)
}
inline void NewArg::set_varname(const char* value) {
  set_has_varname();
  if (varname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    varname_ = new ::std::string;
  }
  varname_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.NewArg.varname)
}
inline void NewArg::set_varname(const char* value, size_t size) {
  set_has_varname();
  if (varname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    varname_ = new ::std::string;
  }
  varname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.NewArg.varname)
}
inline ::std::string* NewArg::mutable_varname() {
  set_has_varname();
  if (varname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    varname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.NewArg.varname)
  return varname_;
}
inline ::std::string* NewArg::release_varname() {
  clear_has_varname();
  if (varname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = varname_;
    varname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewArg::set_allocated_varname(::std::string* varname) {
  if (varname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete varname_;
  }
  if (varname) {
    set_has_varname();
    varname_ = varname;
  } else {
    clear_has_varname();
    varname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.NewArg.varname)
}

// repeated string list_arraynames = 3;
inline int NewArg::list_arraynames_size() const {
  return list_arraynames_.size();
}
inline void NewArg::clear_list_arraynames() {
  list_arraynames_.Clear();
}
inline const ::std::string& NewArg::list_arraynames(int index) const {
  // @@protoc_insertion_point(field_get:presto.NewArg.list_arraynames)
  return list_arraynames_.Get(index);
}
inline ::std::string* NewArg::mutable_list_arraynames(int index) {
  // @@protoc_insertion_point(field_mutable:presto.NewArg.list_arraynames)
  return list_arraynames_.Mutable(index);
}
inline void NewArg::set_list_arraynames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:presto.NewArg.list_arraynames)
  list_arraynames_.Mutable(index)->assign(value);
}
inline void NewArg::set_list_arraynames(int index, const char* value) {
  list_arraynames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.NewArg.list_arraynames)
}
inline void NewArg::set_list_arraynames(int index, const char* value, size_t size) {
  list_arraynames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.NewArg.list_arraynames)
}
inline ::std::string* NewArg::add_list_arraynames() {
  return list_arraynames_.Add();
}
inline void NewArg::add_list_arraynames(const ::std::string& value) {
  list_arraynames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:presto.NewArg.list_arraynames)
}
inline void NewArg::add_list_arraynames(const char* value) {
  list_arraynames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:presto.NewArg.list_arraynames)
}
inline void NewArg::add_list_arraynames(const char* value, size_t size) {
  list_arraynames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:presto.NewArg.list_arraynames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NewArg::list_arraynames() const {
  // @@protoc_insertion_point(field_list:presto.NewArg.list_arraynames)
  return list_arraynames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NewArg::mutable_list_arraynames() {
  // @@protoc_insertion_point(field_mutable_list:presto.NewArg.list_arraynames)
  return &list_arraynames_;
}

// -------------------------------------------------------------------

// CompositeArg

// repeated string arraynames = 1;
inline int CompositeArg::arraynames_size() const {
  return arraynames_.size();
}
inline void CompositeArg::clear_arraynames() {
  arraynames_.Clear();
}
inline const ::std::string& CompositeArg::arraynames(int index) const {
  // @@protoc_insertion_point(field_get:presto.CompositeArg.arraynames)
  return arraynames_.Get(index);
}
inline ::std::string* CompositeArg::mutable_arraynames(int index) {
  // @@protoc_insertion_point(field_mutable:presto.CompositeArg.arraynames)
  return arraynames_.Mutable(index);
}
inline void CompositeArg::set_arraynames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:presto.CompositeArg.arraynames)
  arraynames_.Mutable(index)->assign(value);
}
inline void CompositeArg::set_arraynames(int index, const char* value) {
  arraynames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.CompositeArg.arraynames)
}
inline void CompositeArg::set_arraynames(int index, const char* value, size_t size) {
  arraynames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.CompositeArg.arraynames)
}
inline ::std::string* CompositeArg::add_arraynames() {
  return arraynames_.Add();
}
inline void CompositeArg::add_arraynames(const ::std::string& value) {
  arraynames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:presto.CompositeArg.arraynames)
}
inline void CompositeArg::add_arraynames(const char* value) {
  arraynames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:presto.CompositeArg.arraynames)
}
inline void CompositeArg::add_arraynames(const char* value, size_t size) {
  arraynames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:presto.CompositeArg.arraynames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompositeArg::arraynames() const {
  // @@protoc_insertion_point(field_list:presto.CompositeArg.arraynames)
  return arraynames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CompositeArg::mutable_arraynames() {
  // @@protoc_insertion_point(field_mutable_list:presto.CompositeArg.arraynames)
  return &arraynames_;
}

// repeated .presto.Tuple offsets = 2;
inline int CompositeArg::offsets_size() const {
  return offsets_.size();
}
inline void CompositeArg::clear_offsets() {
  offsets_.Clear();
}
inline const ::presto::Tuple& CompositeArg::offsets(int index) const {
  // @@protoc_insertion_point(field_get:presto.CompositeArg.offsets)
  return offsets_.Get(index);
}
inline ::presto::Tuple* CompositeArg::mutable_offsets(int index) {
  // @@protoc_insertion_point(field_mutable:presto.CompositeArg.offsets)
  return offsets_.Mutable(index);
}
inline ::presto::Tuple* CompositeArg::add_offsets() {
  // @@protoc_insertion_point(field_add:presto.CompositeArg.offsets)
  return offsets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::presto::Tuple >&
CompositeArg::offsets() const {
  // @@protoc_insertion_point(field_list:presto.CompositeArg.offsets)
  return offsets_;
}
inline ::google::protobuf::RepeatedPtrField< ::presto::Tuple >*
CompositeArg::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:presto.CompositeArg.offsets)
  return &offsets_;
}

// required .presto.Tuple dim = 3;
inline bool CompositeArg::has_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompositeArg::set_has_dim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompositeArg::clear_has_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompositeArg::clear_dim() {
  if (dim_ != NULL) dim_->::presto::Tuple::Clear();
  clear_has_dim();
}
inline const ::presto::Tuple& CompositeArg::dim() const {
  // @@protoc_insertion_point(field_get:presto.CompositeArg.dim)
  return dim_ != NULL ? *dim_ : *default_instance_->dim_;
}
inline ::presto::Tuple* CompositeArg::mutable_dim() {
  set_has_dim();
  if (dim_ == NULL) dim_ = new ::presto::Tuple;
  // @@protoc_insertion_point(field_mutable:presto.CompositeArg.dim)
  return dim_;
}
inline ::presto::Tuple* CompositeArg::release_dim() {
  clear_has_dim();
  ::presto::Tuple* temp = dim_;
  dim_ = NULL;
  return temp;
}
inline void CompositeArg::set_allocated_dim(::presto::Tuple* dim) {
  delete dim_;
  dim_ = dim;
  if (dim) {
    set_has_dim();
  } else {
    clear_has_dim();
  }
  // @@protoc_insertion_point(field_set_allocated:presto.CompositeArg.dim)
}

// required string varname = 4;
inline bool CompositeArg::has_varname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CompositeArg::set_has_varname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CompositeArg::clear_has_varname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CompositeArg::clear_varname() {
  if (varname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    varname_->clear();
  }
  clear_has_varname();
}
inline const ::std::string& CompositeArg::varname() const {
  // @@protoc_insertion_point(field_get:presto.CompositeArg.varname)
  return *varname_;
}
inline void CompositeArg::set_varname(const ::std::string& value) {
  set_has_varname();
  if (varname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    varname_ = new ::std::string;
  }
  varname_->assign(value);
  // @@protoc_insertion_point(field_set:presto.CompositeArg.varname)
}
inline void CompositeArg::set_varname(const char* value) {
  set_has_varname();
  if (varname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    varname_ = new ::std::string;
  }
  varname_->assign(value);
  // @@protoc_insertion_point(field_set_char:presto.CompositeArg.varname)
}
inline void CompositeArg::set_varname(const char* value, size_t size) {
  set_has_varname();
  if (varname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    varname_ = new ::std::string;
  }
  varname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:presto.CompositeArg.varname)
}
inline ::std::string* CompositeArg::mutable_varname() {
  set_has_varname();
  if (varname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    varname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:presto.CompositeArg.varname)
  return varname_;
}
inline ::std::string* CompositeArg::release_varname() {
  clear_has_varname();
  if (varname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = varname_;
    varname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CompositeArg::set_allocated_varname(::std::string* varname) {
  if (varname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete varname_;
  }
  if (varname) {
    set_has_varname();
    varname_ = varname;
  } else {
    clear_has_varname();
    varname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:presto.CompositeArg.varname)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace presto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::presto::Response_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::presto::Response_Status>() {
  return ::presto::Response_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_shared_2eproto__INCLUDED
